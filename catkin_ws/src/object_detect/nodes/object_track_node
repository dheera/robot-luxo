#!/usr/bin/env python

import cv2
import numpy as np
import cv_bridge
import json
import os
import rospy
import time

from std_msgs.msg import String
from sensor_msgs.msg import Image

PATH = os.path.dirname(__file__)

class ObjectTrackNode(object):
    def __init__(self):
        rospy.init_node('face_track_node')
        self.param_kx = rospy.get_param("~kx", 0.00035)
        self.param_ky = rospy.get_param("~ky", 0.00035)
        self.param_topic_detections = rospy.get_param("~topic_detections", "detections")
        self.param_topic_animation = rospy.get_param("~topic_animation", "/pwm/animation")
        self.sub_detections = rospy.Publisher(param_topic_detections, String, queue_size = 1)
        self.pub_animation = rospy.Publisher(param_topic_animation, String, queue_size = 1)
        self.request_target = None
        time.sleep(0.1)
        self.head = 0.5
        self.neck = 0.1

    def move(self, head = None, neck = None):
        if head is None:
            head = self.head
        if neck is None:
            neck = self.neck
        animation = [
            {"name": "head", "start_time": 0.0, "end_time": 0.07, "start_value": self.head, "end_value": head},
            {"name": "neck", "start_time": 0.0, "end_time": 0.07, "start_value": self.neck, "end_value": neck},
        ]
        self.pub_animation.publish(json.dumps([animation]))
        self.head = head
        self.neck = neck

    def on_detections(self, msg):
        try:
            detections = json.loads(msg.data)
        except:
            rospy.logwarn("JSON decode error")
            return

        if len(detections) > 0:
            x = detections[0][0] + detections[0][2] / 2.0
            y = detections[0][1] + detections[0][3] / 2.0
            ox = x - image.shape[1] / 2.0
            oy = y - image.shape[0] / 2.0
            print("move to", ox, oy)
            self.request_target = ox * self.param_kx, oy * self.param_ky

        self.is_processing = False

    def spin(self):
        rate = rospy.Rate(8)
        while not rospy.is_shutdown():
            rate.sleep()
            if self.request_target is None:
                self.move()
            else:
                new_head = np.clip(self.head + self.request_target[0], 0.0, 1.0)
                new_neck = np.clip(self.neck + self.request_target[1], 0.0, 1.0)
                self.move(new_head, new_neck)
                self.request_target = None
        rospy.spin()

if __name__ == "__main__":
    node = ObjectTrackNode()
    node.spin()
