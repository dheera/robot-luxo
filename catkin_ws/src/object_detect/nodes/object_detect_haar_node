#!/usr/bin/env python

import cv2
import numpy as np
import cv_bridge
import json
import os
import rospy
import time

from std_msgs.msg import String
from sensor_msgs.msg import Image

PATH = os.path.dirname(__file__)

class ObjectDetectHaarNode(object):
    def __init__(self):
        rospy.init_node('object_detect_haar_node')
        self.param_topic_image = rospy.get_param("~topic_image", "image_raw")
        self.param_topic_detections = rospy.get_param("~topic_detections", "detections")
        self.param_cascade = rospy.get_param("~cascade", "haarcascade_frontalface_default.xml")
        self.cascade = cv2.CascadeClassifier(os.path.join(PATH, "haar", self.param_cascade))
        self.sub_image = rospy.Subscriber(param_topic_image, Image, self.on_image, queue_size = 1)
        self.pub_detections = rospy.Publisher(param_topic_detections, String, queue_size = 1)
        self.is_processing = False

    def on_image(self, msg):
        if self.is_processing:
            return

        self.is_processing = True

        try:
            t = time.time()
            image = cv_bridge.imgmsg_to_cv2(msg, "bgr8")
            image = cv2.resize(image, (320, 240))
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            detections = self.cascade.detectMultiScale(gray, 1.2, 5)

            m = String()
            detections_v = [[x,y,w,h] for (x,y,w,h) in detections]
            m.data = json.dumps(detections_v)
            self.pub_detections.publish(m)
    
        finally:
            self.is_processing = False


    def spin(self):
        rospy.spin()

if __name__ == "__main__":
    node = ObjectDetectHaarNode()
    node.spin()
