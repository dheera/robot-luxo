#!/usr/bin/env python3

import board
import neopixel
import random
import math
import json
import rospy
import time
import numpy as np
from std_msgs.msg import *

BLINK_PATTERNS = [
        [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
        [1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0],
        [1.0, 0.5, 0.0, 0.0, 0.0, 0.5, 1.0, 0.5, 0.0, 0.0, 0.5, 0.0],
        [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5],
        [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0],
        [1.0, 0.5, 0.0, 0.0, 0.0, 0.5, 1.0, 0.5, 0.0, 0.0, 0.5, 0.0],
        [1.0, 1.0, 0.5, 0.5, 1.0, 1.0, 1.0, 1.0, 0.5, 0.5, 1.0, 1.0],
        [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
]

class LightNode(object):
    def __init__(self):
        rospy.init_node('light_node')
        self.sub_rgb = rospy.Subscriber("rgb", ColorRGBA, self.on_rgb)
        self.rgb = (0.1, 0.1, 0.1)
        self.offset = 1
        self.pattern = [1.0] * 12
        self.pixels = neopixel.NeoPixel(board.D21, 12)

        self.blink_i = -1

    def send_pattern(self, pattern):
        for ix in range(12):
            i = (ix + self.offset) % 12
            self.pixels[ix] = int(255*self.rgb[0]*pattern[i]), int(255*self.rgb[1]*pattern[i]), int(255*self.rgb[2]*pattern[i])

    def on_rgb(self, msg):
        self.rgb = max(min(msg.r, 1.0), 0.0), max(min(msg.g, 1.0), 0.0), max(min(msg.b, 1.0), 0.0)

    def spin(self):
        rate = rospy.Rate(10)
        seq = 0
        countdown_to_blink = 50
        while not rospy.is_shutdown():
            rate.sleep()
            seq += 1
            countdown_to_blink -= 1
            self.send_pattern(self.pattern)

            if countdown_to_blink <= 0:
                countdown_to_blink = int(random.uniform(30, 80))
                if random.uniform(0, 5) < 3:
                    self.blink()
                    self.blink()
                else:
                    self.blink()

    def blink(self):
        for pattern in BLINK_PATTERNS:
            rospy.sleep(0.01)
            self.send_pattern(pattern)

if __name__ == "__main__":
    node = LightNode()
    node.spin()

